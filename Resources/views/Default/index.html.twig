{% extends 'BCCResqueBundle::layout.html.twig' %}
{% block body %}
{% include "BCCResqueBundle:Default:_menu.html.twig" with {
    activeNav: 'homepage'
} %}
{% block javascripts %}
    <script src="{{ asset('www/js/main.min.js') }}"></script></script>
    <script src="{{ asset('www/js/dashboard.min.js') }}"></script></script>
{% endblock %}
<div class="container">
    <div class="row">
        <div class="col-md-12 cached-stats-container">
            <h2>
                Cache Statistics - {{ totalTrips }} <small> flights -</small> {{ totalLocations }} <small> locations -</small> {{ totalDates }} <small> days</small>
            </h2>

            {% if mapDashboardMetaData is not empty %}
                <script type='text/javascript' src='https://www.gstatic.com/charts/loader.js'></script>
                <script type="text/javascript" src="https://www.google.com/jsapi"></script>
                <script type='text/javascript'>
                    google.charts.load('current', {'packages': ['geochart', 'calendar']});
                    google.charts.setOnLoadCallback(initializeMapChart);
                    google.charts.setOnLoadCallback(initializeCalendarChart);

                    function initializeMapChart() {
                        var mapData = google.visualization.arrayToDataTable([
                            ['City', 'Departing', 'Arriving'],
                            {% for stat in mapDashboardMetaData %}
                                ['{{stat.location}}', {{stat.departingFlights}}, {{stat.arrivingFlights}}],
                            {% endfor %}
                        ]);
                        var mapOptions = {
                            region: 'AU',
                            displayMode: 'markers',
                            colorAxis: {colors: ['white', 'blue']},
                            height: 400,
                            legend: 'none'
                        };

                        var mapChart = new google.visualization.GeoChart(document.getElementById('map-chart-container'));

                        google.visualization.events.addListener(mapChart, 'select', selectMapHandler);

                        function selectMapHandler(e) {
                            var selection = mapChart.getSelection()[0],
                                mapDashboardMetaData = [{% for stat in mapDashboardMetaData %} '{{ stat.location }}', {% endfor %}],
                                selectedLocation = mapDashboardMetaData[selection.row],
                                selectedIataLocation = selectedLocation.substr(selectedLocation.indexOf("-") + 2);
                            window.location = '/statistics/location/'+selectedIataLocation;
                        }
                        mapChart.draw(mapData, mapOptions);
                    };

                    /* CALENDAR */
                    function initializeCalendarChart() {
                        var calendarData = new google.visualization.DataTable();
                        calendarData.addColumn({ type: 'date', id: 'Date' });
                        calendarData.addColumn({ type: 'number', id: 'departingFlights' });
                        calendarData.addRows([
                            {% for stat in calendarDashboardMetaData %}
                                {% set year = stat['departDate']|split('-')[2] %}
                                {% set month = stat['departDate']|split('-')[1] %}
                                {% set day = stat['departDate']|split('-')[0] %}
                                [new Date({{year}}, {{month}}, {{day}}), {{stat.totalTrips}}],
                            {% endfor %}
                        ]);

                        var calendarOptions = {
                            height: 350
                        };

                        var calendarChart = new google.visualization.Calendar(document.getElementById('calendar-chart-container'));

                        google.visualization.events.addListener(calendarChart, 'select', selectCalendarHandler);

                        function selectCalendarHandler(e) {
                            var selection = calendarChart.getSelection()[0],
                                calendarDashboardMetaData = [{% for stat in calendarDashboardMetaData %} '{{ stat.departDate }}', {% endfor %}],
                                selectedDate = calendarDashboardMetaData[selection.row];
                            window.location = '/statistics/date/'+selectedDate;
                        }

                        calendarChart.draw(calendarData, calendarOptions);
                    };
                </script>
                <div id="map-chart-container" style="width: 700px; height: 300px; margin: 0 auto;"></div>
                <div id="calendar-chart-container" style="width: 1000px; height: 200px; margin: 0 auto; background: white;"></div>
            {% else %}
                <td colspan="12">
                    <em>Map & Calendar Not Available...</em>
                </td>
            {% endif %}

            {#<table class="table table-striped table-bordered">
                <tr>
                    <th class="col-md-3">Origin</th>
                    <th class="col-md-3">Destination</th>
                    <th class="col-md-2">Date</th>
                    <th class="col-md-2">Flights Cached</th>
                    <th class="col-md-2">Timestamp</th>
                </tr>
                {% for flightStat in flightStats %}
                    {% if flightStat is iterable %}
                        <tr>
                            <td class="col-md-3">{{ flightStat['origin'] }}</td>
                            <td class="col-md-3">{{ flightStat['destination'] }}</td>
                            <td class="col-md-2">{{ flightStat['departDate'] }}</td>
                            <td class="col-md-2">{{ flightStat['trips'] }}</td>
                            <td class="col-md-2">{{ flightStat['timestamp'] }}</td>
                        </tr>
                    {% endif %}
                {% else %}
                    <tr>
                        <td colspan="12">
                            <em>empty...</em>
                        </td>
                    </tr>
                {% endfor %}
            </table>#}
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 recurring-jobs-container">
            <h2>
                Recurring Jobs
                <a href="{{ path('job_new', {'jobType': 'recurring'}) }}" class="btn btn-success">Create</a>
                <a href="{{ path('job_new_batch', {'jobType': 'recurring'}) }}" class="btn btn-success">Create Batch</a>
            </h2>
            <table class="table table-striped table-bordered">
                <tr>
                    <th class="col-md-3">First Recurring Job Timestamp</th>
                    <td class="col-md-2">{{ resque.firstDelayedJobTimestamp[0]|date('Y-m-d H:i:s') }}</td>
                </tr>
                <tr>
                    <th>Number of Recurring Jobs</th>
                    <td><a href="{{ path('job_list', {'jobType': 'recurring'}) }}">{{ resque.numberOfDelayedJobs }}</a></td>
                </tr>
            </table>
        </div>
        <div class="col-md-6 failed-jobs-container">
            <h2>Totals</h2>
            <table class="table table-striped table-bordered">
                <tr>
                    <th class="col-md-3">Average Duration</th>
                    <td class="col-md-2"></td>
                </tr>
                <tr>
                    <th class="col-md-3">Total Memory Usage</th>
                    <td class="col-md-2"></td>
                </tr>
                <tr>
                    <th class="col-md-3">Number of Processed Jobs</th>
                    <td class="col-md-2">{# resque.processedJobs|length #}</td>
                </tr>
                <tr>
                    <th class="col-md-3">Number of Failed Jobs</th>
                    <td class="col-md-2"><a href="{{ path('BCCResqueBundle_failed_list') }}">{{ resque.failedJobs|length }}</a></td>
                </tr>
            </table>
        </div>
    </div>


    <div class="row">
        <div class="col-md-6 queues-container">
            <h2>Queues</h2>
            <table class="table table-striped table-bordered">
                <thead>
                <tr>
                    <th class="col-md-3">Name</th>
                    <th class="col-md-2">Jobs</th>
                </tr>
                </thead>
                {% for queue in resque.queues %}
                    <tr>
                        <td>{{ queue.name }}</td>
                        <td><a href="{{ path('BCCResqueBundle_queue_show', { queue: queue.name }) }}">{{ queue.size }}</a></td>
                    </tr>
                {% endfor %}
            </table>
        </div>
        <div class="col-md-6 redis-container">
            <h2>Redis</h2>
            <table class="table table-bordered table-striped">
                <tr>
                    <th class="col-md-3">Host</th>
                    <td class="col-md-2">{{ resque.redisConfiguration.host }}</td>
                </tr>
                <tr>
                    <th>Port</th>
                    <td>{{ resque.redisConfiguration.port }}</td>
                </tr>
                <tr>
                    <th>Database</th>
                    <td>{{ resque.redisConfiguration.database }}</td>
                </tr>
            </table>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12 workers-container">
            <h2>
                Workers
                <a href="/workers/add" class="btn btn-success">Add</a>
            </h2>
            {#<div class='workerScaleContainer'>
                <input id="workersScaleSlider" data-slider-id='workersScaleSlider' type="text" data-slider-min="0" data-slider-max="244" data-slider-step="1" data-slider-value="{{ resque.workers|length }}"/>
                <span id="workersScaleSliderValLabel">Scale Workers: <span id="workersScaleSliderVal">{{ resque.workers|length }}</span></span>
                <a href="/workers/scale/{{ resque.workers|length }}q" class="btn btn-success workersScaleLink">Scale</a>
            </div>#}
            <table class="table table-striped table-bordered">
                <thead>
                <tr>
                    <th class="col-md-3">
                        Where
                    </th>
                    <th class="col-md-3">
                        Queues
                    </th>
                    <th class="col-md-1">
                        Processing
                    </th>
                    <th class="col-md-1">
                        Memory
                    </th>
                    <th class="col-md-1">
                        Duration
                    </th>
                    <th class="col-md-1">
                        Processed
                    </th>
                    <th class="col-md-1">
                        Failed
                    </th>
                    <th class="col-md-2">
                        Action
                    </th>
                </tr>
                </thead>

                {% for worker in resque.workers %}
                    <tr>
                        <td>{{ worker.id }}</td>
                        <td>
                            {% for queue in worker.queues %}
                                <span class="label label-info">{{ queue.name }}</span>
                            {% endfor %}
                        </td>
                        <td>
                            {% set job = worker.currentJob %}
                            {% if job %}
                                <div>
                                    <span class="label label-success">WORKING<span>
                                </div>
                                {#<div>
                                    <strong>{{ job.name }}</strong>
                                </div>
                                <div class="row">
                                    <span class="pull-right">{{ worker.currentJobStart|date }}</span>
                                </div>
                                <div>
                                    <span>
                                        <ul class="unstyled">
                                            {% for argname, argvalue in job.args %}
                                                <li>
                                                    <span>{{ argname }}</span>
                                                    <em class="pull-right">{{ argvalue | json_encode(constant('JSON_PRETTY_PRINT')) }}</em>
                                                </li>
                                            {% endfor %}
                                        </ul>
                                    </span>
                                </div>#}
                            {% else %}
                                <span class="label label-warning">IDLE</span>
                            {% endif %}
                        </td>
                        <td>{{ worker.memoryMB }} MB</td>
                        <td>{{ worker.durationSecs }} secs</td>
                        <td>{{ worker.processedCount }}</td>
                        <td>{{ worker.failedCount }}</td>
                        <td><a href="/workers/remove?id={{ worker.id }}">Remove</a></td>
                    </tr>
                {% else %}
                    <tr>
                        <td colspan="12">
                            <em>empty...</em>
                        </td>
                    </tr>
                {% endfor %}
            </table>
        </div>
    </div>
</div>
{# include "AvailabilityBundle:Common:_intro-helper.html.twig" with {
    introType: 'homepage'
} #}
{% endblock %}